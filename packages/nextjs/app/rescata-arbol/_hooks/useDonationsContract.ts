import { useCallback, useEffect, useState } from "react";
import { sampleProjects } from "../_data/sampleProjects";
import type { Donation, DonationData, TreeProject } from "../_types";
import { parseEther } from "viem";
import { useAccount, useContractRead, useContractWrite, usePublicClient, useWaitForTransaction } from "wagmi";
import deployedContracts from "~~/contracts/deployedContracts";
import { notification } from "~~/utils/scaffold-eth";

// ABI del contrato NGODonations (funciones principales)
// Nota: Estos ABIs coinciden exactamente con el contrato Donations.sol
const DONATIONS_ABI = [
  "function getProject(uint256 projectId) external view returns (tuple(uint256 id, string projectName, string ngoName, address ngoWallet, uint256 targetAmount, uint256 raisedAmount, bool active, uint256 createdAt))",
  "function getProjectDonations(uint256 projectId) external view returns (tuple(uint256 amount, string donorName, string message, uint256 time, address donorAddress)[])",
  "function donateToProject(uint256 projectId, string calldata donorName, string calldata message) external payable",
  "function nextProjectId() external view returns (uint256)",
  "function withdrawFunds(uint256 projectId) external",
  "function owner() external view returns (address)",
  "event DonationReceived(uint256 indexed projectId, address indexed donor, uint256 amount)",
  "event ProjectCreated(uint256 indexed projectId, string projectName, address indexed ngoWallet, uint256 targetAmount)",
  "event FundsWithdrawn(uint256 indexed projectId, uint256 amount)",
] as const;

// Obtener la configuraci√≥n del contrato NGODonations
const getContractConfig = () => {
  // Verificar si existe la configuraci√≥n del contrato en las redes disponibles
  const liskSepoliaConfig = deployedContracts[4202] as any;
  const localhostConfig = deployedContracts[31337] as any;

  const config = liskSepoliaConfig?.NGODonations || localhostConfig?.NGODonations;
  return config;
};

const contractConfig = getContractConfig();
const DONATIONS_CONTRACT_ADDRESS = contractConfig?.address || "0x0000000000000000000000000000000000000000";

// Tipos para los datos del contrato
type ContractProjectData = {
  id: bigint;
  projectName: string;
  ngoName: string;
  ngoWallet: `0x${string}`;
  targetAmount: bigint;
  raisedAmount: bigint;
  active: boolean;
  createdAt: bigint;
};

type ContractDonationData = {
  amount: bigint;
  donorName: string;
  message: string;
  time: bigint;
  donorAddress: `0x${string}`;
};

export const useDonationsContract = () => {
  const { address: userAddress } = useAccount();
  const publicClient = usePublicClient();
  const [projects, setProjects] = useState<TreeProject[]>(sampleProjects); // Mostrar proyectos de ejemplo como UI
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [useSampleData, setUseSampleData] = useState(false); // SIEMPRE usar blockchain real

  // Obtener el n√∫mero total de proyectos
  const { data: nextProjectId } = useContractRead({
    address: DONATIONS_CONTRACT_ADDRESS as `0x${string}`,
    abi: DONATIONS_ABI,
    functionName: "nextProjectId",
    watch: true,
  });

  // Hook para hacer donaciones
  const {
    data: donateData,
    write: donate,
    isLoading: isDonating,
  } = useContractWrite({
    address: DONATIONS_CONTRACT_ADDRESS as `0x${string}`,
    abi: contractConfig?.abi || DONATIONS_ABI,
    functionName: "donateToProject",
    onSuccess: () => {
      notification.success("¬°Donaci√≥n enviada exitosamente!");
    },
    onError: error => {
      console.error("Error al realizar donaci√≥n:", error);
      notification.error("Error al procesar la donaci√≥n");
    },
  });

  // Esperar a que se confirme la transacci√≥n
  const { isLoading: isConfirming, isSuccess: isDonationSuccess } = useWaitForTransaction({
    hash: donateData?.hash,
    onSuccess: data => {
      console.log("üéâ Transacci√≥n confirmada:", data);

      // Buscar el evento DonationReceived en los logs para obtener informaci√≥n adicional
      const donationEvent = data.logs?.find(
        (log: any) => log.topics && log.topics[0] && log.topics[0].includes("DonationReceived"),
      );

      if (donationEvent) {
        console.log("üìß Evento de donaci√≥n encontrado:", donationEvent);
        notification.success("¬°Donaci√≥n confirmada en blockchain! üéâ");
      } else {
        notification.success("¬°Donaci√≥n procesada exitosamente!");
      }

      // Actualizar los datos del proyecto despu√©s de una donaci√≥n exitosa
      if (!useSampleData) {
        // Recargar proyectos desde el contrato para obtener los datos actualizados
        setTimeout(() => {
          console.log("üîÑ Recargando proyectos desde el contrato...");
          loadProjects();
        }, 2000);
      }
    },
    onError: error => {
      console.error("‚ùå Error en la confirmaci√≥n de transacci√≥n:", error);
      notification.error("Error al confirmar la transacci√≥n");
    },
  });

  // Cargar un proyecto espec√≠fico
  const loadProject = useCallback(
    async (projectId: number): Promise<TreeProject | null> => {
      try {
        if (!publicClient) {
          console.warn("Public client no disponible");
          return null;
        }

        if (
          !DONATIONS_CONTRACT_ADDRESS ||
          DONATIONS_CONTRACT_ADDRESS === "0x0000000000000000000000000000000000000000"
        ) {
          console.warn("Direcci√≥n del contrato no configurada");
          return null;
        }

        const project = (await publicClient.readContract({
          address: DONATIONS_CONTRACT_ADDRESS as `0x${string}`,
          abi: DONATIONS_ABI,
          functionName: "getProject",
          args: [BigInt(projectId)],
        })) as ContractProjectData;

        if (!project || project.id === 0n) return null;

        return {
          id: Number(project.id),
          projectName: project.projectName,
          ngoName: project.ngoName,
          ngoWallet: project.ngoWallet,
          targetAmount: project.targetAmount.toString(),
          raisedAmount: project.raisedAmount.toString(),
          active: project.active,
          createdAt: Number(project.createdAt),
        };
      } catch (err) {
        console.error(`Error loading project ${projectId}:`, err);
        return null;
      }
    },
    [publicClient],
  );

  // Cargar todos los proyectos
  const loadProjects = useCallback(async () => {
    console.log("üîÑ Cargando proyectos...");

    // SIEMPRE mostrar proyectos de ejemplo como UI, pero SIEMPRE usar blockchain para donaciones
    setProjects(sampleProjects);
    setUseSampleData(false); // NUNCA simular, siempre usar blockchain real
    setIsLoading(false);
    setError(null);

    // Si hay contrato disponible, intentar cargar proyectos reales tambi√©n
    if (contractConfig && nextProjectId && Number(nextProjectId) > 0) {
      console.log("üîó Intentando cargar proyectos del contrato...");
      setIsLoading(true);

      try {
        const projectPromises: Promise<TreeProject | null>[] = [];

        // Crear promesas para cargar cada proyecto
        for (let i = 1; i < Number(nextProjectId); i++) {
          projectPromises.push(loadProject(i));
        }

        const loadedProjects = await Promise.all(projectPromises);
        const validProjects = loadedProjects.filter((project): project is TreeProject => project !== null);

        if (validProjects.length > 0) {
          // Enriquecer con datos adicionales para la UI
          const enrichedProjects = validProjects.map(project => ({
            ...project,
            image: getProjectImage(project.projectName),
            description: getProjectDescription(project.projectName),
            location: getProjectLocation(project.projectName),
            impact: getProjectImpact(project.projectName),
            co2Capture: getProjectCO2Capture(project.projectName),
            urgency: getProjectUrgency(project.projectName),
          }));

          // Combinar proyectos del contrato con los de ejemplo
          setProjects([...enrichedProjects, ...sampleProjects]);
          console.log(`‚úÖ Proyectos del contrato cargados: ${enrichedProjects.length}`);
        }
      } catch (err) {
        console.error("‚ùå Error loading contract projects:", err);
        // Mantener solo los proyectos de ejemplo
      } finally {
        setIsLoading(false);
      }
    } else {
      console.log("üìã No hay proyectos en el contrato, usando solo proyectos de ejemplo para UI");
    }
  }, [nextProjectId, loadProject]);

  // Cargar donaciones de un proyecto
  const loadProjectDonations = useCallback(
    async (projectId: number): Promise<Donation[]> => {
      try {
        if (!publicClient) {
          console.warn("Public client no disponible");
          return [];
        }

        if (
          !DONATIONS_CONTRACT_ADDRESS ||
          DONATIONS_CONTRACT_ADDRESS === "0x0000000000000000000000000000000000000000"
        ) {
          console.warn("Direcci√≥n del contrato no configurada");
          return [];
        }

        const donations = (await publicClient.readContract({
          address: DONATIONS_CONTRACT_ADDRESS as `0x${string}`,
          abi: DONATIONS_ABI,
          functionName: "getProjectDonations",
          args: [BigInt(projectId)],
        })) as ContractDonationData[];

        return donations.map(donation => ({
          amount: donation.amount.toString(),
          donorName: donation.donorName,
          message: donation.message,
          time: Number(donation.time),
          donorAddress: donation.donorAddress,
        }));
      } catch (err) {
        console.error(`Error loading donations for project ${projectId}:`, err);
        return [];
      }
    },
    [publicClient],
  );

  // Hacer una donaci√≥n - SIEMPRE usa blockchain real
  const makeDonation = useCallback(
    async (donationData: DonationData) => {
      console.log("üöÄ Iniciando donaci√≥n REAL en blockchain:", donationData);

      if (!userAddress) {
        notification.error("Por favor conecta tu wallet con MetaMask");
        throw new Error("Usuario no conectado");
      }

      if (!donationData.amount || parseFloat(donationData.amount) <= 0) {
        notification.error("Monto de donaci√≥n inv√°lido");
        throw new Error("Monto de donaci√≥n inv√°lido");
      }

      if (!donationData.donorName || donationData.donorName.trim() === "") {
        notification.error("Nombre del donante es requerido");
        throw new Error("Nombre del donante es requerido");
      }

      // SIEMPRE procesar donaci√≥n real en blockchain
      console.log("‚õìÔ∏è Procesando donaci√≥n REAL en blockchain...");
      console.log("üìã Datos del contrato:", {
        address: DONATIONS_CONTRACT_ADDRESS,
        contractConfig: !!contractConfig,
        donateFunction: !!donate,
        userAddress: userAddress,
      });

      if (!contractConfig || !contractConfig.address) {
        notification.error("Contrato no configurado. Verifica que el contrato NGODonations est√© desplegado.");
        throw new Error("Contrato no configurado");
      }

      if (!donate) {
        notification.error("Funci√≥n de donaci√≥n no disponible. Verifica tu conexi√≥n a MetaMask.");
        throw new Error("Funci√≥n de donaci√≥n no disponible");
      }

      try {
        const amountInWei = parseEther(donationData.amount);
        console.log("üí∞ Monto en wei:", amountInWei.toString());
        console.log("üìù Argumentos del contrato:", {
          projectId: BigInt(donationData.projectId),
          donorName: donationData.donorName,
          message: donationData.message || "¬°Salvemos este √°rbol!",
          value: amountInWei.toString(),
        });

        notification.info("üîÑ Enviando transacci√≥n a blockchain... Confirma en MetaMask");

        const tx = await donate({
          args: [
            BigInt(donationData.projectId),
            donationData.donorName,
            donationData.message || "¬°Salvemos este √°rbol!",
          ],
          value: amountInWei,
        });

        console.log("‚úÖ Transacci√≥n enviada a blockchain:", tx);
        notification.success("üéâ Transacci√≥n enviada! Esperando confirmaci√≥n...");
      } catch (err: any) {
        console.error("‚ùå Error making donation:", err);

        // Manejar diferentes tipos de errores
        if (err?.message?.includes("User rejected") || err?.message?.includes("user rejected")) {
          notification.error("‚ùå Transacci√≥n cancelada por el usuario");
        } else if (err?.message?.includes("insufficient funds")) {
          notification.error("‚ùå Fondos insuficientes en la wallet");
        } else if (err?.message?.includes("OnlyOwner")) {
          notification.error("‚ùå Solo el propietario puede crear proyectos");
        } else if (err?.message?.includes("ProjectNotFound")) {
          notification.error("‚ùå Proyecto no encontrado en el contrato");
        } else if (err?.message?.includes("InsufficientFunds")) {
          notification.error("‚ùå El monto enviado es 0 o inv√°lido");
        } else if (err?.message?.includes("InvalidArguments")) {
          notification.error("‚ùå Argumentos inv√°lidos enviados al contrato");
        } else {
          notification.error(`‚ùå Error: ${err?.message || "Error desconocido en blockchain"}`);
        }

        throw err;
      }
    },
    [donate, userAddress],
  );

  // Cargar proyectos cuando cambie nextProjectId
  useEffect(() => {
    loadProjects();
  }, [loadProjects]);

  // Funciones auxiliares para enriquecer los datos de los proyectos
  const getProjectImage = (projectName: string): string => {
    // Mapear nombres de proyectos a im√°genes
    const imageMap: Record<string, string> = {
      "Rescate de √Årboles Centenarios": "/images/tree-1.jpg",
      "Reforestaci√≥n del Bosque Nativo": "/images/tree-2.jpg",
      "Protecci√≥n de Biodiversidad": "/images/tree-3.jpg",
      "Rescate de √Årboles en C√≥rdoba": "/images/tree-4.jpg",
      "Conservaci√≥n del Amazonas": "/images/tree-5.jpg",
    };
    return imageMap[projectName] || "/images/default-tree.jpg";
  };

  const getProjectDescription = (projectName: string): string => {
    const descriptionMap: Record<string, string> = {
      "Rescate de √Årboles Centenarios": "Protegiendo √°rboles centenarios que son patrimonio natural de la regi√≥n.",
      "Reforestaci√≥n del Bosque Nativo": "Recuperando √°reas degradadas con especies nativas aut√≥ctonas.",
      "Protecci√≥n de Biodiversidad": "Conservando la diversidad biol√≥gica de nuestros ecosistemas.",
      "Rescate de √Årboles en C√≥rdoba": "Salvando √°rboles urbanos y rurales de la provincia de C√≥rdoba.",
      "Conservaci√≥n del Amazonas": "Protegiendo la selva amaz√≥nica y sus especies √∫nicas.",
    };
    return descriptionMap[projectName] || "Proyecto de conservaci√≥n ambiental.";
  };

  const getProjectLocation = (projectName: string): string => {
    const locationMap: Record<string, string> = {
      "Rescate de √Årboles Centenarios": "C√≥rdoba, Argentina",
      "Reforestaci√≥n del Bosque Nativo": "Patagonia, Argentina",
      "Protecci√≥n de Biodiversidad": "Misiones, Argentina",
      "Rescate de √Årboles en C√≥rdoba": "C√≥rdoba, Argentina",
      "Conservaci√≥n del Amazonas": "Amazonas, Brasil",
    };
    return locationMap[projectName] || "Argentina";
  };

  const getProjectImpact = (projectName: string): string => {
    const impactMap: Record<string, string> = {
      "Rescate de √Årboles Centenarios": "Preservaci√≥n de patrimonio natural",
      "Reforestaci√≥n del Bosque Nativo": "Recuperaci√≥n de ecosistemas",
      "Protecci√≥n de Biodiversidad": "Conservaci√≥n de especies",
      "Rescate de √Årboles en C√≥rdoba": "Mejora del paisaje urbano",
      "Conservaci√≥n del Amazonas": "Protecci√≥n del pulm√≥n del planeta",
    };
    return impactMap[projectName] || "Conservaci√≥n ambiental";
  };

  const getProjectCO2Capture = (projectName: string): string => {
    const co2Map: Record<string, string> = {
      "Rescate de √Årboles Centenarios": "2.5 toneladas/a√±o",
      "Reforestaci√≥n del Bosque Nativo": "1.8 toneladas/a√±o",
      "Protecci√≥n de Biodiversidad": "1.2 toneladas/a√±o",
      "Rescate de √Årboles en C√≥rdoba": "1.5 toneladas/a√±o",
      "Conservaci√≥n del Amazonas": "5.0 toneladas/a√±o",
    };
    return co2Map[projectName] || "1.0 toneladas/a√±o";
  };

  const getProjectUrgency = (projectName: string): "low" | "medium" | "high" => {
    const urgencyMap: Record<string, "low" | "medium" | "high"> = {
      "Rescate de √Årboles Centenarios": "high",
      "Reforestaci√≥n del Bosque Nativo": "medium",
      "Protecci√≥n de Biodiversidad": "high",
      "Rescate de √Årboles en C√≥rdoba": "medium",
      "Conservaci√≥n del Amazonas": "high",
    };
    return urgencyMap[projectName] || "medium";
  };

  // Debug: Informaci√≥n del contrato para verificar configuraci√≥n
  useEffect(() => {
    console.log("üîß Configuraci√≥n del contrato NGODonations:");
    console.log("üìç Direcci√≥n:", DONATIONS_CONTRACT_ADDRESS);
    console.log("‚öôÔ∏è Config disponible:", !!contractConfig);
    console.log("üåê Usuario conectado:", !!userAddress);
    console.log("‚õìÔ∏è Modo blockchain REAL:", !useSampleData);
    if (contractConfig) {
      console.log("üìã ABI disponible:", !!contractConfig.abi);
      console.log("üöÄ LISTO para donaciones reales!");
    } else {
      console.warn("‚ö†Ô∏è Contrato no configurado - verifica el deployment");
    }
  }, [userAddress, useSampleData]);

  return {
    // Estado
    projects,
    isLoading,
    error,
    useSampleData,

    // Acciones
    loadProjects,
    loadProject,
    loadProjectDonations,
    makeDonation,

    // Estado de transacciones
    isDonating,
    isConfirming,
    isDonationSuccess,
    donationHash: donateData?.hash,

    // Utilidades
    refreshProjects: loadProjects,
    contractAddress: DONATIONS_CONTRACT_ADDRESS,

    // Debug info
    contractConfig,
    isContractReady: !!contractConfig && !!contractConfig.address,
  };
};
